from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from utils.db_api import applications_commands
from loader import dp
from filters import IsAdminCheck, IsPrivate_call

# -------------------------------------–ë–õ–û–ö –í–´–í–û–î–ê –í–°–ï–• –ê–ô–î–ò –ò –ü–†–û–°–ú–û–¢–†–ê –ó–ê–Ø–í–û–ö-----------------------------------------

# CallbackData –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
listapp_callback = CallbackData("list_apps", "app_id")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
APPS_PER_PAGE = 5


@dp.callback_query_handler(IsAdminCheck(), IsPrivate_call(), text='list_app')
async def get_list_app(call: types.CallbackQuery):
    await call.answer()
    apps = await applications_commands.select_all_apps()
    page_number = 1  # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫
    await show_apps_page(call, apps, page_number)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
async def show_apps_page(call, apps, page_number):
    start_index = (page_number - 1) * APPS_PER_PAGE
    total_pages = -(-len(apps) // APPS_PER_PAGE)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–≤–µ—Ä—Ö
    end_index = start_index + APPS_PER_PAGE
    apps_for_page = apps[start_index:end_index]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    kb_check_all_apps = InlineKeyboardMarkup(row_width=1)
    for app in apps_for_page:
        btn_profile = InlineKeyboardButton(text=f'#Ô∏è‚É£ {app.app_id} | {app.magazin} | {app.famils} {app.username}',
                                           callback_data=listapp_callback.new(app_id=app.app_id))
        kb_check_all_apps.add(btn_profile)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_buttons = generate_page_buttons(page_number, total_pages)
    kb_check_all_apps.row(*page_buttons)

    btn_cancel = InlineKeyboardButton(text='‚¨Ö–ù–∞–∑–∞–¥', callback_data='cancel')
    kb_check_all_apps.add(btn_cancel)

    await call.message.edit_text(f'<b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ :</b>', reply_markup=kb_check_all_apps)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def generate_page_buttons(page_number, total_pages):
    buttons = []
    if page_number > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_list_{page_number}"))
    buttons.append(InlineKeyboardButton(text=f'{page_number} / {total_pages}', callback_data='total_listapp'))
    if page_number < total_pages:
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_list_{page_number}"))
    return buttons


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query_handler(lambda query: query.data.startswith(('prev_list', 'next_list')))
async def process_page_button(call: types.CallbackQuery):
    await call.answer()
    page_number = int(call.data.split('_')[-1])

    if call.data.startswith('prev_list'):
        await call.answer()
        page_number -= 1
    else:
        page_number += 1

    apps = await applications_commands.select_all_apps()
    await show_apps_page(call, apps, page_number)


@dp.callback_query_handler(text_contains='list_apps')
async def get_check_apps(call: types.CallbackQuery):
    await call.answer()
    callback_data = call.data.split(":")
    app_id = callback_data[1]
    app = await applications_commands.select_application(int(app_id))
    kb_del_info_apps = InlineKeyboardMarkup(row_width=1)
    btn_delete_info_apps = InlineKeyboardButton(text='‚¨Ö–ù–∞–∑–∞–¥', callback_data='list_app')
    kb_del_info_apps.add(btn_delete_info_apps)
    global message_info_apps
    message_info_apps = await call.message.edit_text(text=f'üîé<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ä—Ü–∏—è –æ –ó–∞—è–≤–∫–µ:</b>\n\n'
                                                          f'<b>üÜî–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {app.app_id}\n'
                                                          f'<b>üìçNickName</b>: {app.tg_first_name}\n'
                                                          f'<b>üÜîID:</b> {app.user_id}\n'
                                                          f'<b>üë§–§–∞–º–∏–ª–∏—è</b>: {app.famils}\n'
                                                          f'<b>üë§–ò–º—è</b>: {app.username}\n'
                                                          f'<b>üìû–¢–µ–ª–µ—Ñ–æ–Ω</b>: {app.phone}\n'
                                                          f'<b>üè¢–ú–∞–≥–∞–∑–∏–Ω</b>: {app.magazin}\n'
                                                          f'<b>–¢–µ–∫—Å—Ç</b>: <code>{app.text_app}</code>\n'
                                                          f'<b>–ö—Ç–æ –æ—Ç–≤–µ—á–∞–ª:</b> {app.by_admin}\n'
                                                          f'<b>–û—Ç–≤–µ—Ç –æ—Ç –¢–ü</b>: <code>{app.reply_text_admin}</code>\n',
                                                     reply_markup=kb_del_info_apps)


# ------------------------------------------------ –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö -------------------------------------------
