import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from state import send_reply_from_admin
from utils.db_api import register_commands as commands
from loader import dp, bot
from filters import IsAdminCheck, IsPrivate_call

# ---------------------------------------------–ë–õ–û–ö –ü–û –ö–ù–û–ü–ö–ï –û–¢–í–ï–¢–ò–¢–¨--------------------------------------------------

# CallbackData –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
replys_callback = CallbackData("admin_reply", "user_id")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
USERS_PER_PAGE = 5


@dp.callback_query_handler(IsAdminCheck(), IsPrivate_call(), text='replysfromadmin')
async def get_reply(call: types.CallbackQuery):
    await call.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await commands.select_all_users()
    page_number = 1  # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_users_page(call, users, page_number)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
async def show_users_page(call, users, page_number):
    start_index = (page_number - 1) * USERS_PER_PAGE
    end_index = start_index + USERS_PER_PAGE
    users_for_page = users[start_index:end_index]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    kb_check_all_users = InlineKeyboardMarkup(row_width=1)
    for user in users_for_page:
        famils = user.famils.replace('(', ' ')
        username = user.username.replace('(', ' ')
        btn_profile = InlineKeyboardButton(text=f'üë§{famils} {username}',
                                           callback_data=replys_callback.new(user_id=user.user_id))
        kb_check_all_users.add(btn_profile)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = -(-len(users) // USERS_PER_PAGE)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–≤–µ—Ä—Ö
    page_buttons = generate_page_buttons(page_number, total_pages)
    kb_check_all_users.row(*page_buttons)

    btn_cancel = InlineKeyboardButton(text='‚¨Ö–ù–∞–∑–∞–¥ ', callback_data='cancel')
    kb_check_all_users.add(btn_cancel)
    await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>', reply_markup=kb_check_all_users)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def generate_page_buttons(page_number, total_pages):
    buttons = []
    if page_number > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_replys_page_{page_number}"))
    buttons.append(InlineKeyboardButton(text=f'{page_number} / {total_pages}', callback_data='total_check'))
    if page_number < total_pages:
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_replys_page_{page_number}"))
    return buttons


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query_handler(lambda query: query.data.startswith(('prev_replys', 'next_replys')))
async def process_page_button(call: types.CallbackQuery):
    page_number = int(call.data.split('_')[-1])

    if call.data.startswith('prev_replys'):
        page_number -= 1
    else:
        page_number += 1

    users = await commands.select_all_users()
    await show_users_page(call, users, page_number)


@dp.callback_query_handler(text_contains='admin_reply')
async def reply_from_admins(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    global reply_message_admin
    callback_data = call.data.split(":")
    user_id = callback_data[1]
    users = await commands.select_registration_by_user_id(int(user_id))
    answer = call.message.text
    reply_message_admin = await dp.bot.send_message(chat_id=call.message.chat.id,
                                                    text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è <b>{users.famils}</b> <b>{users.username}</b> :",
                                                    reply_to_message_id=answer)
    await state.update_data(user_id=user_id, reply_message_from_admin=reply_message_admin)
    await send_reply_from_admin.text.set()


@dp.message_handler(state=send_reply_from_admin.text)
async def get_reply_text(message: types.Message, state: FSMContext):
    global msg_replys_admin
    global message_chat_replytext
    global message_id_replytext
    text = message.text
    message_chat_replytext = message.chat.id
    message_id_replytext = message.message_id
    data = await state.get_data()
    user_id = data.get('user_id')
    msg_replys_admin = await message.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç!')
    await dp.bot.send_message(chat_id=user_id,
                              text=f"üí¨ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n<b>{text}</b>")
    await state.finish()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    await asyncio.sleep(1)
    await reply_message_admin.delete()
    await bot.delete_message(message_chat_replytext, message_id_replytext)
    await msg_replys_admin.delete()
# ---------------------------------------–ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ü–û –ö–ù–û–ü–ö–ï –û–¢–í–ï–¢–ò–¢–¨-------------------------------------------------
