from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from utils.db_api import register_commands as commands
from utils.db_api import register_commands as a_commands
from loader import dp, bot
from filters import IsAdminCheck, IsPrivate_call

# ---------------------------------------–ë–õ–û–ö –†–ê–ó–ë–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø------------------------------------------------------

# CallbackData –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
unban_user_callback = CallbackData("unban", "user_id")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
USERS_PER_PAGE = 5


@dp.callback_query_handler(IsAdminCheck(), IsPrivate_call(), text='unbanusers')
async def get_unbanned_user(call: types.CallbackQuery):
    await call.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await commands.select_all_users()
    page_number = 1  # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_users_page(call, users, page_number)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
async def show_users_page(call, users, page_number):
    start_index = (page_number - 1) * USERS_PER_PAGE
    end_index = start_index + USERS_PER_PAGE
    users_for_page = users[start_index:end_index]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    kb_check_all_users = InlineKeyboardMarkup(row_width=1)
    for user in users:
        famils = user.famils.replace('(', ' ')
        username = user.username.replace('(', ' ')
        btn_profile = InlineKeyboardButton(text=f'üë§{famils} {username} ',
                                           callback_data=unban_user_callback.new(user_id=user.user_id))
        kb_check_all_users.add(btn_profile)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = -(-len(users) // USERS_PER_PAGE)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–≤–µ—Ä—Ö
    page_buttons = generate_page_buttons(page_number, total_pages)
    kb_check_all_users.row(*page_buttons)

    btn_cancel = InlineKeyboardButton(text='‚¨Ö–ù–∞–∑–∞–¥ ', callback_data='cancel')
    kb_check_all_users.add(btn_cancel)
    await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –†–∞–∑–±–∞–Ω–∞</b>:', reply_markup=kb_check_all_users)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def generate_page_buttons(page_number, total_pages):
    buttons = []
    if page_number > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_unban_page_{page_number}"))
    buttons.append(InlineKeyboardButton(text=f'{page_number} / {total_pages}', callback_data='total_check'))
    if page_number < total_pages:
        buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_unban_page_{page_number}"))
    return buttons


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query_handler(lambda query: query.data.startswith(('prev_unban', 'next_unban')))
async def process_page_button(call: types.CallbackQuery):
    page_number = int(call.data.split('_')[-1])

    if call.data.startswith('prev_unban'):
        page_number -= 1
    else:
        page_number += 1

    users = await commands.select_all_users()
    await show_users_page(call, users, page_number)


@dp.callback_query_handler(text_contains='unban')
async def unban_user(call: types.CallbackQuery):
    await call.answer(cache_time=5)
    callback_data = call.data.split(":")
    user_id = callback_data[1]
    await a_commands.update_status_reason(user_id=int(user_id), status='active', reason='no reason')
    users = await commands.select_user_id(int(user_id))
    await call.message.answer(
        f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ <b>—Ä–∞–∑–±–∞–Ω–∏–ª–∏</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users.famils}</b> <b>{users.username}</b>!')
    # await bot.send_message(user_id, f"‚ö†Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª</b> –í–∞—Å –≤ –±–æ—Ç–µ!")

# -----------------------------------------–ö–û–ù–ï–¶ –ë–õ–û–ö–ê –†–ê–ó–ë–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø---------------------------------------------
